<!DOCTYPE html>
<html lang="pt-br">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Troca de senha</title>
    <link rel="stylesheet" href="/css/style.css" />
  </head>
  <body>
    <div class="container">
      <form id="changePassword">
        <h1>Troque sua senha</h1>
        <label for="pass1">Nova senha</label>
        <input type="password" class="passInput" id="pass1" />
        <ul id="passwordStatus"></ul>
        <label for="pass2">Confirme sua senha</label>
        <input type="password" class="passInput" id="pass2" />
        <button>Confirmar</button>
      </form>
    </div>

    <script>
      // Importes
      const token = "<%= token %>";
      const url = "<%= URL %>";
      // DOM
      const form = document.querySelector("#changePassword");
      const pass1 = document.querySelector("#pass1");
      const pass2 = document.querySelector("#pass2");
      const passwordStatus = document.querySelector("#passwordStatus");

      // Eventos
      form?.addEventListener("submit", async (event) => {
        event.preventDefault();

        if (pass1.value === pass2.value && pass1.value.length > 8) {
          const response = await updatePassword();
          console.log(response);
          if (!response) return;
          else if (!response.feedback.sucess) {
            const { errors } = response.feedback;
            reportErrorsToClient(errors);
          } else {
            passwordStatus.innerHTML = "Senha alterada!";
          }
        } else if (pass1.value.length > 8){
          passwordStatus.innerHTML = "";
          passwordStatus.innerHTML = "<li>Senhas diferentes.</li>";
        } else {
          passwordStatus.innerHTML = "";
          passwordStatus.innerHTML = "<li>Deve conter no mínimo 8 caracteres.</li>";
        }
      });

      // Funções
      async function updatePassword() {
        return await fetch(`${url}/user/password/update`, {
          method: "PUT",
          body: JSON.stringify({ password: pass1.value }),
          headers: {
            "Content-Type": "application/json; charset=UTF-8",
            Authorization: `Bearer ${token}`,
          },
        })
          .then((response) => response.json())
          .catch((error) => (passwordStatus.textContent = "<li>Erro.</li>"));
      }

      // Verifica quais são os erros e retorna ao usuário
      function reportErrorsToClient(errors) {
        passwordStatus.innerHTML = "";

        if (errors.includes("INVALID_TOKEN")) {
          passwordStatus.innerHTML += "<li>Token inválido.</li>";
          return;
        }

        if (errors.includes("PASSWORD_TOO_SHORT"))
          passwordStatus.innerHTML +=
            "<li>Deve conter no mínimo 8 caracteres.</li>";
        if (errors.includes("PASSWORD_TOO_LONG"))
          passwordStatus.innerHTML +=
            "<li>Deve conter no máximo 40 caracteres.</li>";
        if (errors.includes("PASSWORD_NO_UPPERCASE"))
          passwordStatus.innerHTML +=
            "<li>Deve conter pelo menos uma letra maiúscula.</li>";
        if (errors.includes("PASSWORD_NO_LOWERCASE"))
          passwordStatus.innerHTML +=
            "<li>Deve conter pelo menos uma letra minúscula.</li>";
        if (errors.includes("PASSWORD_NO_NUMBER"))
          passwordStatus.innerHTML +=
            "<li>Deve conter pelo menos um número.</li>";
        if (errors.includes("PASSWORD_NO_SPECIAL_CHAR"))
          passwordStatus.innerHTML +=
            "<li>Deve conter pelo menos um caracter especial.</li>";
      }
    </script>
  </body>
</html>
